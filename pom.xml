<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.lzz.chat</groupId>
    <artifactId>chat</artifactId>
    <version>1.2</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/>
    </parent>

    <properties>
        <hadoop.hdfs.version>2.4.0</hadoop.hdfs.version>
        <hadoop.mapreduce.client.core.version>2.4.0</hadoop.mapreduce.client.core.version>
        <hadoop.common.version>2.4.0</hadoop.common.version>
        <hadoop.mapreduce.client.common.version>2.4.0</hadoop.mapreduce.client.common.version>
        <hadoop.mapreduce.client.jobclient.version>2.4.0</hadoop.mapreduce.client.jobclient.version>
        <commons.lang.version>3.3.2</commons.lang.version>
        <commons.io.version>2.4</commons.io.version>
        <project.name>lzz</project.name>
        <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的仓库服务 账号密码 -->
        <docker.serverId>192.168.1.198</docker.serverId>
        <docker.registry>192.168.1.197:5000</docker.registry>
        <docker.host>http://192.168.1.198:2375</docker.host>
        <flink.version>1.4.1</flink.version>
        <spark.version>2.10</spark.version>
        <spark_id_version>2.1.0</spark_id_version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--springboot测试-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.4</version>
        </dependency>
        <!-- Spring Boot Mybatis 依赖 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--kafka-->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>

        <!--zookeeper-->
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.4.6</version>
        </dependency>
        <!-- Spring Boot Redis 依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-redis</artifactId>
            <version>1.3.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.9</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-hadoop-boot</artifactId>
            <version>2.2.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alipay.sdk</groupId>
            <artifactId>alipay-sdk-java</artifactId>
            <version>3.7.26.ALL</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-hdfs</artifactId>
            <version>${hadoop.hdfs.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-mapreduce-client-core</artifactId>
            <version>${hadoop.mapreduce.client.core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>${hadoop.common.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-mapreduce-client-common</artifactId>
            <version>${hadoop.mapreduce.client.common.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-mapreduce-client-jobclient</artifactId>
            <version>${hadoop.mapreduce.client.jobclient.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>2.1.3.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.6.7</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <!-- cglib 动态代理依赖 begin -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.2.5</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.ow2.asm</groupId>-->
            <!--<artifactId>asm</artifactId>-->
            <!--<version>1.0</version>-->
            <!--<optional>true</optional>-->
        <!--</dependency>-->
        <!-- cglib 动态代理依赖 stop -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
        <dependency>
            <groupId>com.stripe</groupId>
            <artifactId>stripe-java</artifactId>
            <version>16.2.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-java</artifactId>
            <version>${flink.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-streaming-java_2.11</artifactId>
            <version>${flink.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-clients_2.11</artifactId>
            <version>${flink.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-connector-wikiedits_2.11</artifactId>
            <version>${flink.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-connector-kafka-0.8_2.11</artifactId>
            <version>${flink.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${spark.version}</artifactId>
            <version>${spark_id_version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${spark.version}</artifactId>
            <version>${spark_id_version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${spark.version}</artifactId>
            <version>${spark_id_version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-streaming_${spark.version}</artifactId>
            <version>${spark_id_version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-streaming-kafka_${spark.version}</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-mllib_${spark.version}</artifactId>
            <version>${spark_id_version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Srping Boot 打包工具 打包成可执行的jar  -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--打包后 复制jar包到指定文件目录-->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- 复制资源后的输出目录 -->
                            <outputDirectory>target</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/docker</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- docker插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                    <serverId>${docker.serverId}</serverId>
                    <!-- docker私服地址 -->
                    <registryUrl>${docker.registry}</registryUrl>
                    <!-- 指定docker server的地址，该配置不需要本机安装docker -->
                    <dockerHost>${docker.host}</dockerHost>
                    <imageName>${project.name}/${project.artifactId}:${project.version}</imageName>
                    <imageTags>
                        <imageTag>${project.version}</imageTag>
                    </imageTags>
                    <!-- docker的构建目录（构建上下文），包含Dockerfile  -->
                    <dockerDirectory>${project.basedir}</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
                <!--<executions>-->
                    <!--&lt;!&ndash; package之前清除上一次构建的image &ndash;&gt;-->
                    <!--<execution>-->
                        <!--<id>remove-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>removeImage</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<imageName>-->
                                <!--${project.name}/${project.artifactId}-->
                            <!--</imageName>-->
                            <!--<imageTags>-->
                                <!--<imageTag>${project.version}</imageTag>-->
                                <!--<imageTag>latest</imageTag>-->
                            <!--</imageTags>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--<execution>-->
                        <!--<id>remove-tag-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>removeImage</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<imageName>-->
                                <!--${docker.registry}/${project.name}/${project.artifactId}-->
                            <!--</imageName>-->
                            <!--<imageTags>-->
                                <!--<imageTag>${project.version}</imageTag>-->
                                <!--<imageTag>latest</imageTag>-->
                            <!--</imageTags>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--&lt;!&ndash; 将docker:build绑定到package这个phase  &ndash;&gt;-->
                    <!--<execution>-->
                        <!--<id>build-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>build</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--&lt;!&ndash; imageName中若不指定tag，则会打上latest &ndash;&gt;-->
                            <!--<imageName>${project.name}/${project.artifactId}:${project.version}</imageName>-->
                            <!--&lt;!&ndash; 可以使用<imageTags>标签打其他额外的tag &ndash;&gt;-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--&lt;!&ndash; 将docker:tag绑定到package这个phase  &ndash;&gt;-->
                    <!--<execution>-->
                        <!--<id>tag-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>tag</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<image>${project.name}/${project.artifactId}:${project.version}</image>-->
                            <!--<newName>${docker.registry}/${project.name}/${project.artifactId}:${project.version}</newName>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--<execution>-->
                        <!--<id>tag-image-latest</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>tag</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<image>${project.name}/${project.artifactId}:${project.version}</image>-->
                            <!--<newName>${docker.registry}/${project.name}/${project.artifactId}:latest</newName>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--&lt;!&ndash; 将docker:push绑定到deploy这个phase  &ndash;&gt;-->
                    <!--<execution>-->
                        <!--<id>push-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>push</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<imageName>-->
                                <!--${docker.registry}/${project.name}/${project.artifactId}:${project.version}-->
                            <!--</imageName>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                    <!--<execution>-->
                        <!--<id>push-image-latest</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>push</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<imageName>-->
                                <!--${docker.registry}/${project.name}/${project.artifactId}:latest-->
                            <!--</imageName>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            </plugin>
        </plugins>
    </build>

</project>